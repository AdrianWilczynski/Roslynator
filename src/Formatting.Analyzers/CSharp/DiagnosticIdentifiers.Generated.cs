// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

using System;

namespace Roslynator.Formatting.CSharp
{
    public static partial class DiagnosticIdentifiers
    {
        public const string RemoveNewLinesFromAccessorListOfAutoProperty = "RCS0001";
        public const string AddNewLinesToAccessorListOfFullProperty = "RCS0002";
        public const string RemoveNewLinesFromAccessor = "RCS0003";
        public const string PlaceBinaryOperatorAfterOperand = "RCS0004";
        public const string PlaceConditionalOperatorAfterExpression = "RCS0005";
        public const string AddEmptyLineAfterRegionAndBeforeEndRegion = "RCS0006";
        public const string RemoveNewLineBetweenIfKeywordAndElseKeyword = "RCS0007";
        public const string RemoveNewLineBeforeWhileKeywordOfDoStatement = "RCS0008";
        public const string AddEmptyLineBeforeAndAfterUsingDirectiveList = "RCS0009";
        public const string AddEmptyLineBetweenSwitchSections = "RCS0010";
        public const string PlaceExpressionBodyArrowAtEndOfLine = "RCS0011";
        public const string PlaceExpressionBodyArrowBeforeExpression = "RCS0012";
        public const string AddNewLineBeforeTypeParameterConstraint = "RCS0013";
        public const string AddNewLineBeforeConstructorInitializer = "RCS0014";
        public const string AddEmptyLineBetweenSinglelineDeclarations = "RCS0015";
        public const string AddEmptyLineBetweenDeclarationAndDocumentationComment = "RCS0016";
        public const string AddEmptyLineBetweenSinglelineDeclarationsOfDifferentKind = "RCS0017";
        public const string RemoveEmptyLineBetweenSinglelineDeclarationsOfSameKind = "RCS0018";
        public const string AddNewLineToEmptyBlock = "RCS1023";
        public const string AddNewLineBeforeEnumMember = "RCS1025";
        public const string AddNewLineBeforeStatement = "RCS1026";
        public const string AddNewLineBeforeEmbeddedStatement = "RCS1027";
        public const string AddNewLineAfterSwitchLabel = "RCS1028";
        public const string PlaceBinaryOperatorBeforeOperand = "RCS1029";
        public const string AddEmptyLineAfterEmbeddedStatement = "RCS1030";
        public const string AddEmptyLineBetweenDeclarations = "RCS1057";
        public const string AddNewLineToEmptyTypeDeclaration = "RCS1076";
        public const string UseLinefeedAsNewLine = "RCS1086";
        public const string UseCarriageReturnAndLinefeedAsNewLine = "RCS1087";
        public const string UseSpacesInsteadOfTab = "RCS1088";
        public const string AddEmptyLineBeforeClosingBraceOfDoStatement = "RCS1092";
        public const string AddEmptyLineAfterClosingBraceOfBlock = "RCS1153";
        public const string PlaceConditionalOperatorBeforeExpression = "RCS1184";
        public const string AddNewLinesToBlock = "RCS1185";
    }
}